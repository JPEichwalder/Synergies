history -cclearclcclose allpkg load signal %signal package is needed for filter functions-->has to be downloaded (pkg install -forge signal)pkg load matgeompkg load linear-algebra% add functions pathfunctionsPath = addpath(genpath('D:\octave\')); %folder with skript and functions% directory of the folder with the raw c3d and loasol data for each participantsave_folder = ['D:\synergies_constraints_july\results'];cd (save_folder);load('metadata.mat');load('EMG_matrix.mat');clear joints EMG_raw EMG_timenorm;muscles     = muscles;nr_mus      = length(muscles);probands    = probands;nr_prb      = length(probands);conditions  = conditions;nr_con      = length(conditions);EMG_trl = EMG_contrl;   %change to the one neededEMG_con = EMG_con;      %change to the one neededEMG_all = EMG_all;%initialization technices for nnmf 1 = use this technice; 0 = don't use this technice;initrand    = 1;initnnsvd   = 1;initsparse  = 1;%properties for nnmfmaxiter = 5000;tol     = 1e-6;for prb = 1:nr_prb  proband = probands{prb}    sessions  = fieldnames(EMG_all.(proband));  nr_ses    = length(sessions);  for ses = 1:nr_ses    session = sessions{ses}%%%%%%%% synergies overall conditions    
    emgmatrix = EMG_all.(proband).(session);    emgmatrix(emgmatrix<0) = 0;    noz = []; yez = [];    for row = 1:nr_mus      if length(nonzeros(emgmatrix(row,:)))>0        noz(row) = row;      else        yez(row) = row;      end%if    end%for-->row    noz = nonzeros(noz);    yez = nonzeros(yez);    emgmatrix2 = emgmatrix(noz,:);    for syn = 1:nr_mus-1##      num2str(syn)      %rand initialization      if initrand == 1;        [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol);        Wa  = W./max(W);        H   = H.*max(W)';        W   = Wa; clear Wa;        W(isnan(W)) = 0; H(isnan(H)) = 0;        iter_all.Rand.(proband).(session)(syn)             = iter;        synMat_all.Rand.(proband).(session)(syn).err       = HIS.relError(end);        synMat_all.Rand.(proband).(session)(syn).W(noz,:)  = W;        synMat_all.Rand.(proband).(session)(syn).W(yez,:)  = 0;        synMat_all.Rand.(proband).(session)(syn).H         = H;        clear Winit Hinit W H iter HIS Wa;      end%if            %NNSVDLRC initialization      if initnnsvd == 1;        [Winit,Hinit]     = NNSVDLRC(emgmatrix2,syn);        [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit, 'Hinit', Hinit);        Wa  = W./max(W);        H   = H.*max(W)';        W   = Wa; clear Wa;        W(isnan(W)) = 0; H(isnan(H)) = 0;        iter_all.Nnsvd.(proband).(session)(syn)             = iter;        synMat_all.Nnsvd.(proband).(session)(syn).err       = HIS.relError(end);        synMat_all.Nnsvd.(proband).(session)(syn).W(noz,:)  = W;        synMat_all.Nnsvd.(proband).(session)(syn).W(yez,:)  = 0;        synMat_all.Nnsvd.(proband).(session)(syn).H         = H;        clear Winit Hinit W H iter HIS Wa;      end%if                 %Sparse initialization      if initsparse == 1;        Winit         = rand(nr_mus, syn) * 0.05; % Initialize the W matrix with random values in the range [0, 0.05]        clear randmus;        randmus(1,:)  = randperm(nr_mus, syn);    % generate random indexes        for i = 1:syn % Set one random element in each synergy vector to a random value in the range [0.7, 0.8]           Winit(randmus(1,i), i) = rand() * 0.1 + 0.7; % Set the selected element to a random value in the range [0.7, 0.8]        end%for-->i        [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit);        Wa  = W./max(W);        H   = H.*max(W)';        W   = Wa; clear Wa;        W(isnan(W)) = 0; H(isnan(H)) = 0;        iter_all.Sparse.(proband).(session)(syn)             = iter;        synMat_all.Sparse.(proband).(session)(syn).err       = HIS.relError(end);        synMat_all.Sparse.(proband).(session)(syn).W(noz,:)  = W;        synMat_all.Sparse.(proband).(session)(syn).W(yez,:)  = 0;        synMat_all.Sparse.(proband).(session)(syn).H         = H;        clear Winit Hinit W H iter HIS Wa;      end%if          end%for-->syn        initializations = fieldnames(synMat_all);    nr_ini          = length(initializations);    for ini = 1:nr_ini      initialization = initializations{ini};
      VAF_all.(initialization).(proband).(session) = VAFcalc(emgmatrix2, synMat_all.(initialization).(proband).(session));      [NoS_allknee1.(initialization).(proband).(session), angles_all1.(initialization).(proband).(session)] = VAFknee2(VAF_all.(initialization).(proband).(session));    end%for-->ini    clear emgmatrix emgmatrix2;%%%%%%% synergies over conditions    for con = 1:nr_con      condition = conditions{con}      emgmatrix = EMG_con.(proband).(session).(condition);      emgmatrix(emgmatrix<0) = 0;      noz = []; yez = [];      for row = 1:nr_mus        if length(nonzeros(emgmatrix(row,:)))>0          noz(row) = row;        else          yez(row) = row;        end%if      end%for-->row      noz = nonzeros(noz);      yez = nonzeros(yez);      emgmatrix2 = emgmatrix(noz,:);      for syn = 1:nr_mus-1  ##      num2str(syn)        %rand initialization        if initrand == 1;          [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol);          Wa  = W./max(W);          H   = H.*max(W)';          W   = Wa; clear Wa;          W(isnan(W)) = 0; H(isnan(H)) = 0;          iter_con.Rand.(proband).(session).(condition)(syn)             = iter;          synMat_con.Rand.(proband).(session).(condition)(syn).err       = HIS.relError(end);          synMat_con.Rand.(proband).(session).(condition)(syn).W(noz,:)  = W;          synMat_con.Rand.(proband).(session).(condition)(syn).W(yez,:)  = 0;          synMat_con.Rand.(proband).(session).(condition)(syn).H         = H;          clear Winit Hinit W H iter HIS Wa;        end%if                %NNSVDLRC initialization        if initnnsvd == 1;          [Winit,Hinit]     = NNSVDLRC(emgmatrix2,syn);          [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit, 'Hinit', Hinit);          Wa  = W./max(W);          H   = H.*max(W)';          W   = Wa; clear Wa;          W(isnan(W)) = 0; H(isnan(H)) = 0;          iter_con.Nnsvd.(proband).(session).(condition)(syn)             = iter;          synMat_con.Nnsvd.(proband).(session).(condition)(syn).err       = HIS.relError(end);          synMat_con.Nnsvd.(proband).(session).(condition)(syn).W(noz,:)  = W;          synMat_con.Nnsvd.(proband).(session).(condition)(syn).W(yez,:)  = 0;          synMat_con.Nnsvd.(proband).(session).(condition)(syn).H         = H;          clear Winit Hinit W H iter HIS Wa;        end%if                     %Sparse initialization        if initsparse == 1;          Winit         = rand(nr_mus, syn) * 0.05; % Initialize the W matrix with random values in the range [0, 0.05]          clear randmus;          randmus(1,:)  = randperm(nr_mus, syn);    % generate random indexes          for i = 1:syn % Set one random element in each synergy vector to a random value in the range [0.7, 0.8]             Winit(randmus(1,i), i) = rand() * 0.1 + 0.7; % Set the selected element to a random value in the range [0.7, 0.8]          end%for-->i          [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit);          Wa  = W./max(W);          H   = H.*max(W)';          W   = Wa; clear Wa;          W(isnan(W)) = 0; H(isnan(H)) = 0;          iter_con.Sparse.(proband).(session).(condition)(syn)             = iter;          synMat_con.Sparse.(proband).(session).(condition)(syn).err       = HIS.relError(end);          synMat_con.Sparse.(proband).(session).(condition)(syn).W(noz,:)  = W;          synMat_con.Sparse.(proband).(session).(condition)(syn).W(yez,:)  = 0;          synMat_con.Sparse.(proband).(session).(condition)(syn).H         = H;          clear Winit Hinit W H iter HIS Wa;        end%if              end%for-->syn            initializations = fieldnames(synMat_con);      nr_ini          = length(initializations);      for ini = 1:nr_ini        initialization = initializations{ini};        VAF_con.(initialization).(proband).(session).(condition) = VAFcalc(emgmatrix2, synMat_con.(initialization).(proband).(session).(condition));        [NoS_conknee1.(initialization).(proband).(session).(condition), angles_con1.(initialization).(proband).(session).(condition)] = VAFknee2(VAF_con.(initialization).(proband).(session).(condition));      end%for-->ini      clear emgmatrix emgmatrix2;    end%for-->con    %%%%%%% synergies over trials##    for con = 1:nr_con##      condition = conditions{con}##      for trl = 1:numel(EMG_trl.(proband).(session).(condition));##        disp(['stepnumber ', num2str(trl)]);##        emgmatrix = EMG_trl.(proband).(session).(condition){trl,1};##        emgmatrix(emgmatrix<0) = 0;##        noz = []; yez = [];##        for row = 1:nr_mus##          if length(nonzeros(emgmatrix(row,:)))>0##            noz(row) = row;##          else##            yez(row) = row;##          end%if##        end%for-->row##        noz = nonzeros(noz);##        yez = nonzeros(yez);##        emgmatrix2 = emgmatrix(noz,:);##        for syn = 1:nr_mus-1##    ##      num2str(syn)##          %rand initialization##          if initrand == 1;##            [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol);##            Wa  = W./max(W);##            H   = H.*max(W)';##            W   = Wa; clear Wa;##            W(isnan(W)) = 0; H(isnan(H)) = 0;##            iter_trl.Rand.(proband).(session).(condition){trl,1}(syn)             = iter;##            synMat_trl.Rand.(proband).(session).(condition){trl,1}(syn).err       = HIS.relError(end);##            synMat_trl.Rand.(proband).(session).(condition){trl,1}(syn).W(noz,:)  = W;##            synMat_trl.Rand.(proband).(session).(condition){trl,1}(syn).W(yez,:)  = 0;##            synMat_trl.Rand.(proband).(session).(condition){trl,1}(syn).H         = H;##            clear Winit Hinit W H iter HIS Wa;##          end%if##          ##          %NNSVDLRC initialization##          if initnnsvd == 1;##            [Winit,Hinit]     = NNSVDLRC(emgmatrix2,syn);##            [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit, 'Hinit', Hinit);##            Wa  = W./max(W);##            H   = H.*max(W)';##            W   = Wa; clear Wa;##            W(isnan(W)) = 0; H(isnan(H)) = 0;##            iter_trl.Nnsvd.(proband).(session).(condition){trl,1}(syn)             = iter;##            synMat_trl.Nnsvd.(proband).(session).(condition){trl,1}(syn).err       = HIS.relError(end);##            synMat_trl.Nnsvd.(proband).(session).(condition){trl,1}(syn).W(noz,:)  = W;##            synMat_trl.Nnsvd.(proband).(session).(condition){trl,1}(syn).W(yez,:)  = 0;##            synMat_trl.Nnsvd.(proband).(session).(condition){trl,1}(syn).H         = H;##            clear Winit Hinit W H iter HIS Wa;##          end%if##               ##          %Sparse initialization##          if initsparse == 1;##            Winit         = rand(nr_mus, syn) * 0.05; % Initialize the W matrix with random values in the range [0, 0.05]##            clear randmus;##            randmus(1,:)  = randperm(nr_mus, syn);    % generate random indexes##            for i = 1:syn % Set one random element in each synergy vector to a random value in the range [0.7, 0.8]##               Winit(randmus(1,i), i) = rand() * 0.1 + 0.7; % Set the selected element to a random value in the range [0.7, 0.8]##            end%for-->i##            [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit);##            Wa  = W./max(W);##            H   = H.*max(W)';##            W   = Wa; clear Wa;##            W(isnan(W)) = 0; H(isnan(H)) = 0;##            iter_trl.Sparse.(proband).(session).(condition){trl,1}(syn)             = iter;##            synMat_trl.Sparse.(proband).(session).(condition){trl,1}(syn).err       = HIS.relError(end);##            synMat_trl.Sparse.(proband).(session).(condition){trl,1}(syn).W(noz,:)  = W;##            synMat_trl.Sparse.(proband).(session).(condition){trl,1}(syn).W(yez,:)  = 0;##            synMat_trl.Sparse.(proband).(session).(condition){trl,1}(syn).H         = H;##            clear Winit Hinit W H iter HIS Wa;##          end%if##          ##        end%for-->syn##        ##        initializations = fieldnames(synMat_trl);##        nr_ini          = length(initializations);##        for ini = 1:nr_ini##          initialization = initializations{ini};##          VAF_trl.(initialization).(proband).(session).(condition){trl,1} = VAFcalc(emgmatrix2, synMat_trl.(initialization).(proband).(session).(condition){trl,1});##          [NoS_trlknee1.(initialization).(proband).(session).(condition)(trl,1), angles_trl1.(initialization).(proband).(session).(condition){trl,1}] = VAFknee2(VAF_trl.(initialization).(proband).(session).(condition){trl,1});##        end%for-->ini##        clear emgmatrix emgmatrix2;##      end%for-->trl##    end%for-->con  end%for-->ses    clear proband;end%for####save -mat-binary 'synMat_coind5dV.mat' 'synMat_conEqu' 'synMat_all' 'synMat_trlEqu' 'synMat_trlMvc' 'corr_Equ' 'corr_Mvc';####save -mat-binary 'VAF_coind5dV.mat' 'VAF_all' 'VAF_conMvc' 'NoS_knee1' 'NoS_conMvc';save -mat-binary 'synergy_matrix.mat' 'synMat_con' 'synMat_all' 'synMat_trl';save -mat-binary 'VAF_matrix.mat' 'VAF_all' 'VAF_con' 'NoS_allknee1' 'NoS_conknee1' 'NoS_trlknee1' 'NoS_trlknee1';
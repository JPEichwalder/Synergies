history -cclearclcclose allpkg load signal %signal package is needed for filter functions-->has to be downloaded (pkg install -forge signal)pkg load matgeompkg load linear-algebra% add functions pathfunctionsPath = addpath(genpath('D:\octave\')); %folder with skript and functions% directory of the folder with the raw c3d and loasol data for each participantsave_folder = ['D:\synergies_constraints_july\results'];cd (save_folder);load('metadata.mat');load('EMG_matrix.mat');clear joints EMG_raw EMG_timenorm;muscles     = muscles;nr_mus      = length(muscles);probands    = probands;nr_prb      = length(probands);conditions  = conditions;nr_con      = length(conditions);EMG_trl = EMG_contrl;   %change to the one neededEMG_con = EMG_con;      %change to the one neededEMG_all = EMG_all;%initialization technices for nnmf 1 = use this technice; 0 = don't use this technice;initrand    = 1;initnnsvd   = 1;initsparse  = 1;%properties for nnmfmaxiter = 5000;tol     = 1e-6;##probands = fieldnames(EMG_trl);##nr_prb = length(probands);##conditions = fieldnames(EMG_con.(probands{1}));##nr_con = length(conditions);for prb = 1:nr_prb  proband = probands{prb}    sessions  = fieldnames(EMG_all.(proband));  nr_ses    = length(sessions);  for ses = 1:nr_ses    session = sessions{ses}%%%%%%%% synergies overall conditions    
    emgmatrix = EMG_all.(proband).(session);    emgmatrix(emgmatrix<0) = 0;    noz = []; yez = [];    for row = 1:nr_mus      if length(nonzeros(emgmatrix(row,:)))>0        noz(row) = row;      else        yez(row) = row;      end%if    end%for-->row    noz = nonzeros(noz);    yez = nonzeros(yez);    emgmatrix2 = emgmatrix(noz,:);    for syn = 1:nr_mus-1##      num2str(syn)      %rand initialization      if initrand == 1;        [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol);        Wa  = W./max(W);        H   = H.*max(W)';        W   = Wa; clear Wa;        W(isnan(W)) = 0; H(isnan(H)) = 0;        iter_all.Rand.(proband).(session)(syn)             = iter;        synMat_all.Rand.(proband).(session)(syn).err       = HIS.relError(end);        synMat_all.Rand.(proband).(session)(syn).W(noz,:)  = W;        synMat_all.Rand.(proband).(session)(syn).W(yez,:)  = 0;        synMat_all.Rand.(proband).(session)(syn).H         = H;        clear Winit Hinit W H iter HIS Wa;      end%if            %NNSVDLRC initialization      if initnnsvd == 1;        [Winit,Hinit]     = NNSVDLRC(emgmatrix2,syn);        [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit, 'Hinit', Hinit);        Wa  = W./max(W);        H   = H.*max(W)';        W   = Wa; clear Wa;        W(isnan(W)) = 0; H(isnan(H)) = 0;        iter_all.Nnsvd.(proband).(session)(syn)             = iter;        synMat_all.Nnsvd.(proband).(session)(syn).err       = HIS.relError(end);        synMat_all.Nnsvd.(proband).(session)(syn).W(noz,:)  = W;        synMat_all.Nnsvd.(proband).(session)(syn).W(yez,:)  = 0;        synMat_all.Nnsvd.(proband).(session)(syn).H         = H;        clear Winit Hinit W H iter HIS Wa;      end%if                 %Sparse initialization      if initsparse == 1;        Winit         = rand(nr_mus, syn) * 0.05; % Initialize the W matrix with random values in the range [0, 0.05]        clear randmus;        randmus(1,:)  = randperm(nr_mus, syn);    % generate random indexes        for i = 1:syn % Set one random element in each synergy vector to a random value in the range [0.7, 0.8]           Winit(randmus(1,i), i) = rand() * 0.1 + 0.7; % Set the selected element to a random value in the range [0.7, 0.8]        end%for-->i        [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit);        Wa  = W./max(W);        H   = H.*max(W)';        W   = Wa; clear Wa;        W(isnan(W)) = 0; H(isnan(H)) = 0;        iter_all.Sparse.(proband).(session)(syn)             = iter;        synMat_all.Sparse.(proband).(session)(syn).err       = HIS.relError(end);        synMat_all.Sparse.(proband).(session)(syn).W(noz,:)  = W;        synMat_all.Sparse.(proband).(session)(syn).W(yez,:)  = 0;        synMat_all.Sparse.(proband).(session)(syn).H         = H;        clear Winit Hinit W H iter HIS Wa;      end%if          end%for-->syn        initializations = fieldnames(synMat_all);    nr_ini          = length(initializations);    for ini = 1:nr_ini      initialization = initializations{ini};
      VAF_all.(initialization).(proband).(session) = VAFcalc(emgmatrix2, synMat_all.(initialization).(proband).(session));      [NoS_allknee1.(initialization).(proband).(session), angles_all1.(initialization).(proband).(session)] = VAFknee2(VAF_all.(initialization).(proband).(session));    end%for-->ini    clear emgmatrix emgmatrix2;%%%%%%% synergies over conditions    for con = 1:nr_con      condition = conditions{con}      emgmatrix = EMG_con.(proband).(session).(condition);      emgmatrix(emgmatrix<0) = 0;      noz = []; yez = [];      for row = 1:nr_mus        if length(nonzeros(emgmatrix(row,:)))>0          noz(row) = row;        else          yez(row) = row;        end%if      end%for-->row      noz = nonzeros(noz);      yez = nonzeros(yez);      emgmatrix2 = emgmatrix(noz,:);      for syn = 1:nr_mus-1  ##      num2str(syn)        %rand initialization        if initrand == 1;          [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol);          Wa  = W./max(W);          H   = H.*max(W)';          W   = Wa; clear Wa;          W(isnan(W)) = 0; H(isnan(H)) = 0;          iter_con.Rand.(proband).(session).(condition)(syn)             = iter;          synMat_con.Rand.(proband).(session).(condition)(syn).err       = HIS.relError(end);          synMat_con.Rand.(proband).(session).(condition)(syn).W(noz,:)  = W;          synMat_con.Rand.(proband).(session).(condition)(syn).W(yez,:)  = 0;          synMat_con.Rand.(proband).(session).(condition)(syn).H         = H;          clear Winit Hinit W H iter HIS Wa;        end%if                %NNSVDLRC initialization        if initnnsvd == 1;          [Winit,Hinit]     = NNSVDLRC(emgmatrix2,syn);          [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit, 'Hinit', Hinit);          Wa  = W./max(W);          H   = H.*max(W)';          W   = Wa; clear Wa;          W(isnan(W)) = 0; H(isnan(H)) = 0;          iter_con.Nnsvd.(proband).(session).(condition)(syn)             = iter;          synMat_con.Nnsvd.(proband).(session).(condition)(syn).err       = HIS.relError(end);          synMat_con.Nnsvd.(proband).(session).(condition)(syn).W(noz,:)  = W;          synMat_con.Nnsvd.(proband).(session).(condition)(syn).W(yez,:)  = 0;          synMat_con.Nnsvd.(proband).(session).(condition)(syn).H         = H;          clear Winit Hinit W H iter HIS Wa;        end%if                     %Sparse initialization        if initsparse == 1;          Winit         = rand(nr_mus, syn) * 0.05; % Initialize the W matrix with random values in the range [0, 0.05]          clear randmus;          randmus(1,:)  = randperm(nr_mus, syn);    % generate random indexes          for i = 1:syn % Set one random element in each synergy vector to a random value in the range [0.7, 0.8]             Winit(randmus(1,i), i) = rand() * 0.1 + 0.7; % Set the selected element to a random value in the range [0.7, 0.8]          end%for-->i          [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', maxiter, 'Tol', tol, 'Winit', Winit);          Wa  = W./max(W);          H   = H.*max(W)';          W   = Wa; clear Wa;          W(isnan(W)) = 0; H(isnan(H)) = 0;          iter_con.Sparse.(proband).(session).(condition)(syn)             = iter;          synMat_con.Sparse.(proband).(session).(condition)(syn).err       = HIS.relError(end);          synMat_con.Sparse.(proband).(session).(condition)(syn).W(noz,:)  = W;          synMat_con.Sparse.(proband).(session).(condition)(syn).W(yez,:)  = 0;          synMat_con.Sparse.(proband).(session).(condition)(syn).H         = H;          clear Winit Hinit W H iter HIS Wa;        end%if              end%for-->syn            initializations = fieldnames(synMat_con);      nr_ini          = length(initializations);      for ini = 1:nr_ini        initialization = initializations{ini};        VAF_con.(initialization).(proband).(session).(condition) = VAFcalc(emgmatrix2, synMat_con.(initialization).(proband).(session).(condition));        [NoS_conknee1.(initialization).(proband).(session).(condition), angles_con1.(initialization).(proband).(session).(condition)] = VAFknee2(VAF_con.(initialization).(proband).(session).(condition));      end%for-->ini      clear emgmatrix emgmatrix2;    end%for-->con    ##    ##    ##    ##    ##    ##    ##    ##    ##    ##    ##    trialnames = fieldnames(EMG_trl.(proband));##    nr_trl = length(trialnames);##    for con = 1:nr_con##      condition = conditions{con}##      emgmatrix = EMG_con.(proband).(condition)([1,2,3,4,5,6,7,8,12,13,14,15,16],:);##      emgmatrix(emgmatrix<0) = 0;##      noz = []; yez = [];##      for row = 1:13##        if length(nonzeros(emgmatrix(row,:)))>0##          noz(row) = row;##        else##          yez(row) = row;##        endif##      end%for##      noz = nonzeros(noz);##      yez = nonzeros(yez);##      emgmatrix2 = emgmatrix(noz,:);##      stdev = std(emgmatrix2');##      Vnew  = diag(1./stdev)*emgmatrix2;##      for syn = 1:12##        [Winit,Hinit] = NNSVDLRC(Vnew,syn);##  ##      tol = 1e-5; maxiter = 5000; timelimit = 100000000000;##  ##      [W,H] = nmf(Vnew,Winit,Hinit,tol,timelimit,maxiter);##        [W, H, iter, HIS] = nmf_bpas_ed(Vnew,syn, 'MaxIter', 5000, 'Tol', 1e-5, 'Winit', Winit, 'Hinit', Hinit);##        W= diag(stdev)*W;##        Wa = W./max(W);##        H = H.*max(W)';##        W = Wa; clear Wa;##        W(isnan(W)) = 0; H(isnan(H)) = 0;##        iterall_conEqu.(proband).(condition)(syn) = iter;##        synMat_conEqu.(proband).(condition)(syn).err = HIS.relError(end);##        synMat_conEqu.(proband).(condition)(syn).W(noz,:) = W;##        synMat_conEqu.(proband).(condition)(syn).W(yez,:) = 0;##        synMat_conEqu.(proband).(condition)(syn).H = H;##        clear Winit Hinit W H iter HIS;##        ##        [Winit,Hinit] = NNSVDLRC(emgmatrix2,syn);##        [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', 5000, 'Tol', 1e-5, 'Winit', Winit, 'Hinit', Hinit);##        Wa = W./max(W);##        H = H.*max(W)';##        W = Wa; clear Wa;##        W(isnan(W)) = 0; H(isnan(H)) = 0;##        iterall_conMvc.(proband).(condition)(syn) = iter;##        synMat_all.(proband).(condition)(syn).err = HIS.relError(end);##        synMat_all.(proband).(condition)(syn).W(noz,:) = W;##        synMat_all.(proband).(condition)(syn).W(yez,:) = 0;##        synMat_all.(proband).(condition)(syn).H = H;##        clear Winit Hinit W H iter HIS;##      end%for##      VAF_all.(proband).(condition) = VAFcalc(emgmatrix, synMat_conEqu.(proband).(condition));##      [NoS_knee1.(proband).(condition), angles_conEqu.(proband).(condition)] = VAFknee2(VAF_all.(proband).(condition));##      ##      VAF_conMvc.(proband).(condition) = VAFcalc(emgmatrix, synMat_all.(proband).(condition));##      [NoS_conMvc.(proband).(condition), angles_conMvc.(proband).(condition)] = VAFknee2(VAF_conMvc.(proband).(condition));##      clear emgmatrix Vnew stdev noz yez;##    end%for##    ##    for trl = 1:nr_trl##      trial = trialnames{trl}##      emgmatrix = EMG_trl.(proband).(trial)([1,2,3,4,5,6,7,8,12,13,14,15,16],:);##      noz = []; yez = [];##      for row = 1:13##        if length(nonzeros(emgmatrix(row,:)))>0##          noz(row) = row;##        else##          yez(row) = row;##        endif##      end%for##      noz = nonzeros(noz);##      yez = nonzeros(yez);##      emgmatrix2 = emgmatrix(noz,:);##      stdev = std(emgmatrix2');##      Vnew  = diag(1./stdev)*emgmatrix2;##      for syn = 1:12##        [Winit,Hinit] = NNSVDLRC(Vnew,syn);##        [W, H, iter, HIS] = nmf_bpas_ed(Vnew,syn, 'MaxIter', 60, 'Tol', 1e-5, 'Winit', Winit, 'Hinit', Hinit);##        W= diag(stdev)*W;##        Wa = W./max(W);##        H = H.*max(W)';##        W = Wa; clear Wa;##        W(noz,:) = W; W(yez,:) = 0;##        W(isnan(W)) = 0; H(isnan(H)) = 0;##        iterall_trlEqu.(proband).(trial)(syn) = iter;##        synMat_trlEqu.(proband).(trial)(syn).err = HIS.relError(end);##          b = strfind(trial, conditions);##          id = find(~cellfun(@isempty,b'));##          condition = conditions{id};##          Wcon = synMat_conEqu.(proband).(condition)(syn).W;##          wc(1:syn,1) = 0;##          wi(1:syn,1) = 0;##          corre = corr(Wcon,W); corre(isnan(corre)) = -1; on = sum(sum(corre(:,:) == -1)); corre(corre == -1) = [-1:-0.0000001:-1+0.0000001-on*0.0000001];##          corrso = sort(nonzeros(corre),'descend');##          i = 1;##          ii = 1;##          if syn>1##            while (ii<=syn)##              [iwc,iwi] = find(corrso(i) == corre);##              for wid =1:length(iwi)##                if any(wc == iwc(wid))==0 && any(wi == iwi(wid))==0##                  wc(iwc) = iwc(wid);##                  wi(iwc) = iwi(wid);##                  ii = ii+1;##                end%if##              i = i+1;##              if i> length(corrso)##                break##              end%if##              end%for--> wid##              if i> length(corrso)##                break##              end%if##            end%while##          else##            wc = 1;wi = 1;##          end%if##                 ##        synMat_trlEqu.(proband).(trial)(syn).W(:,wc) = W(:,wi);##        synMat_trlEqu.(proband).(trial)(syn).H(wc,:) = H(wi,:);##        corr_Equ.(proband)(syn).(trial) = corr(Wcon, synMat_trlEqu.(proband).(trial)(syn).W);##        clear Winit Hinit W H iter HIS;##        ##        [Winit,Hinit] = NNSVDLRC(emgmatrix2,syn);##        [W, H, iter, HIS] = nmf_bpas_ed(emgmatrix2,syn, 'MaxIter', 500, 'Tol', 1e-5, 'Winit', Winit, 'Hinit', Hinit);##        Wa = W./max(W);##        H = H.*max(W)';##        W = Wa; clear Wa;##        iterall_trlMvc.(proband).(trial)(syn) = iter;##        synMat_trlMvc.(proband).(trial)(syn).err = HIS.relError(end);##        W(noz,:) = W; W(yez,:) = 0;##        W(isnan(W)) = 0; H(isnan(H)) = 0;##          Wcon = synMat_all.(proband).(condition)(syn).W;##          wc(1:syn,1) = 0;##          wi(1:syn,1) = 0;##          corre = corr(Wcon,W); corre(isnan(corre)) = -1; on = sum(sum(corre(:,:) == -1)); corre(corre == -1) = [-1:-0.0000001:-1+0.0000001-on*0.0000001];##          corrso = sort(nonzeros(corre),'descend');##          i = 1;##          ii = 1;##          if syn>1##            while (ii<=syn)##              [iwc,iwi] = find(corrso(i) == corre);##              for wid =1:length(iwi)##                if any(wc == iwc(wid))==0 && any(wi == iwi(wid))==0##                  wc(iwc) = iwc(wid);##                  wi(iwc) = iwi(wid);##                  ii = ii+1;##                end%if##              i = i+1;##              if i> length(corrso)##                break##              end%if##              end%for--> wid##              if i> length(corrso)##                break##              end%if##            end%while##          else##            wc = 1;wi = 1;##          end%if##        synMat_trlMvc.(proband).(trial)(syn).W(:,wc) = W(:,wi);##        synMat_trlMvc.(proband).(trial)(syn).H(wc,:) = H(wi,:);##        corr_Mvc.(proband)(syn).(trial) = corr(Wcon, synMat_trlMvc.(proband).(trial)(syn).W);##        clear Winit Hinit W H iter HIS;##      end%for##      clear trial emgmatrix Vnew noz yez;##    end%for  end%for-->ses    clear proband;end%for##save -mat-binary 'synMat_coind5dV.mat' 'synMat_conEqu' 'synMat_all' 'synMat_trlEqu' 'synMat_trlMvc' 'corr_Equ' 'corr_Mvc';##save -mat-binary 'VAF_coind5dV.mat' 'VAF_all' 'VAF_conMvc' 'NoS_knee1' 'NoS_conMvc';save -mat-binary 'synergy_matrix.mat' 'synMat_con' 'synMat_all';save -mat-binary 'VAF_matrix.mat' 'VAF_all' 'VAF_con' 'NoS_allknee1' 'NoS_conknee1';